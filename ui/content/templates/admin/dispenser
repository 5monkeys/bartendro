{% extends 'admin/layout' %}
{% block body %}
<div class="main">
    <div class="admin_content">	
        <div style="float: left">
        <h2>Dispensers</h2>
          {% if saved %}
             <p>Your changes have been saved.</p>
          {% endif %}
          </br>
          <p>There are {{ count }} dispensers available.</p>
          </br>
          <p><button type="button" class="small_button" onclick="reset()">reset chain</button></p>
          </br>
          <p><button type="button" class="small_button" id="test_dispensers" onclick="test_dispensers()">test dispensers</button></p>
          </br>
          <p><button type="button" class="small_button" id="check_levels" onclick="check_levels()">check liquid levels</button></p>
        </div>
        <div class="forms" style="float: right; margin-right: 10px">
		<form method="POST" action="/admin/dispenser/save">

                    {% for i in range(1, count + 1) %}
	                <div class="forminput">
	                {% if states[i-1] == 1 %}
                              {{ form["dispenser%s" % i].label(class="dispenser_out")}}: 
                        {% elif states[i-1] == 2 %}
                              {{ form["dispenser%s" % i].label(class="dispenser_warning")}}: 
                        {% else %}
                              {{ form["dispenser%s" % i].label}}: 
                        {% endif %}
                              {{ form["dispenser%s" % i](class="form") }}
                        <button type="button" id="disp{{ i }}" onclick="toggle({{ i }})">turn on</button>
                        <button type="button" id="test{{ i }}" onclick="test_dispense({{ i }})">dispense {{ calibrate_ml }}ml</button>
                              {{ form["actual%s" % i](size="3") }}
                        </div>
                    {% endfor %}

	            <div class="button">
                        {{ form.cancel(class="small_button") }}
                        {{ form.save(class="small_button") }}
                </div>
        </form>
	</div>
    </div>
</div>
<script type="text/javascript">

var dispensers = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];

function toggle(disp)
{
    if (disp < 1 || disp > 15)
        return;

    //$("#size_text").text(drink_size + " fluid ounces");

    dispensers[disp-1] = !dispensers[disp-1];
    $.ajax({
            url: "/ws/dispenser/" + disp + "/" + (dispensers[disp-1] ? "on" : "off") ,
            success: function(html)
            {
                if (dispensers[disp-1] == true)
                    $("#disp" + disp).text('turn off');
                else
                    $("#disp" + disp).text('turn on');
            }
    });
}
function test_dispense(disp)
{
    if (disp < 1 || disp > 15)
        return;

    $("#test" + disp).text('dispensing');
    $("#test" + disp).attr('disabled', true);
    $.ajax({
            url: "/ws/dispenser/" + disp + "/test" ,
            success: function(html)
            {
                $("#test" + disp).text('dispense {{ calibrate_ml }}ml');
                $("#test" + disp).attr('disabled', false);
            }
    });
}
function reset()
{
    $.ajax({
            url: "/ws/reset" ,
            success: function(html)
            {
            }
    });
}
function test_dispensers()
{
    $("#test_dispensers").text('testing...');
    $("#test_dispensers").attr('disabled', true);
    $.ajax({
            url: "/ws/test" ,
            success: function(html)
            {
                if (html != "")
                    alert(html);

                $("#test_dispensers").text('test dispensers');
                $("#test_dispensers").attr('disabled', false);
            }
    });
}
function check_levels()
{
    $("#check_levels").text("checking levels...");
    $("#check_levels").attr('disabled', true);
    $.ajax({
            url: "/ws/checklevels" ,
            success: function(html)
            {
                 location.reload();
            },
            error: function(xhr, txtStatus, errorThrown)
            {
                 alert("Error checking levels. Useless error info: " + errorThrown);
                 location.reload();
            }
    });
}
</script>
{% endblock %}
